name: AI PR Commenter

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-comment:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > pr_diff.txt

      - name: Call OpenAI API to generate comment
        id: openai
        env:
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
            RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @- <<EOF
            {
            "model": "gpt-3.5-turbo",
            "messages": [
                {
                "role": "user",
                "content": "Please review the following PR diff and generate a helpful comment for the developers:\n$(cat pr_diff.txt)"
                }
            ],
            "max_tokens": 150
            }
            EOF
            )

            # Extraer error si existe
            ERROR=$(echo "$RESPONSE" | jq -r '.error.message // empty')

            if [ -n "$ERROR" ]; then
            echo "OpenAI API error detected: $ERROR" >&2
            echo "openai_failed=true" >> $GITHUB_OUTPUT
            echo "completions=OpenAI API failed: $ERROR" >> $GITHUB_OUTPUT
            else
            COMMENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
            # Por seguridad, si la respuesta está vacía
            if [ -z "$COMMENT" ]; then
                COMMENT="No comment generated by AI."
            fi
            echo "openai_failed=false" >> $GITHUB_OUTPUT
            echo "completions=$COMMENT" >> $GITHUB_OUTPUT
            fi

      - name: Fallback to GitHub Copilot
        id: copilot
        if: steps.openai.outputs.openai_failed == 'true'
        run: |
            echo "Trying GitHub Copilot as fallback..."
            
            # Generar comentario simple pero útil como fallback
            COPILOT_COMMENT="🤖 **AI Code Review (Fallback)**

            Based on the PR changes, here's an automated review:

            📊 **Analysis Summary:**
            - Changes detected in the pull request
            - Automated review triggered due to primary AI service unavailability

            🔍 **Recommendations:**
            - ✅ Verify all tests pass
            - 📝 Ensure code follows project conventions
            - 🔒 Review security implications
            - 📚 Update documentation if needed

            *This review was generated using GitHub's fallback system due to OpenAI API quota limits.*"

            echo "completions=$COPILOT_COMMENT" >> $GITHUB_OUTPUT

      - name: Post comment to PR
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Usar el comentario de OpenAI si funcionó, sino usar el de Copilot
              const comment = `${{ steps.openai.outputs.completions }}` || `${{ steps.copilot.outputs.completions }}` || "No AI comment available.";
              
              // Escape any special characters that might break the comment
              const escapedComment = comment.replace(/`/g, '\\`').replace(/\$/g, '\\$');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: escapedComment,
              });
              
              console.log('Comment posted successfully');
            } catch (error) {
              console.error('Failed to post comment:', error);
              
              // Try to post a fallback comment
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: '🤖 AI PR review attempted but encountered an issue. Please review manually.',
                });
              } catch (fallbackError) {
                console.error('Failed to post fallback comment:', fallbackError);
                throw error; // Re-throw original error
              }
            }

