name: AI PR Commenter

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  ai-comment:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > pr_diff.txt

      - name: Call OpenAI API to generate comment
        id: openai
        env:
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
            RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @- <<EOF
            {
            "model": "gpt-3.5-turbo",
            "messages": [
                {
                "role": "user",
                "content": "Please review the following PR diff and generate a helpful comment for the developers:\n$(cat pr_diff.txt)"
                }
            ],
            "max_tokens": 150
            }
            EOF
            )

            # Extraer error si existe
            ERROR=$(echo "$RESPONSE" | jq -r '.error.message // empty')

            if [ -n "$ERROR" ]; then
            echo "OpenAI API error detected: $ERROR" >&2
            echo "completions=Sorry, the AI service is currently unavailable or quota exceeded. Please try again later." >> $GITHUB_OUTPUT
            else
            COMMENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
            # Por seguridad, si la respuesta está vacía
            if [ -z "$COMMENT" ]; then
                COMMENT="No comment generated by AI."
            fi
            echo "completions=$COMMENT" >> $GITHUB_OUTPUT
            fi

      - name: Post comment to PR
        uses: actions/github-script@v6
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            completion: ${{ steps.openai.outputs.completions }
            script: |
                const comment = inputs.completion || "No AI comment available.";
                github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    body: comment,
                });
