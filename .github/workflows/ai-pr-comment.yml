name: AI PR Commenter

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-comment:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necesario para an√°lisis completo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Run Code Quality Checks
        id: quality
        continue-on-error: true
        run: |
          echo "Running code quality analysis..."
          
          # Inicializar variables
          ESLINT_ERRORS=0
          ESLINT_WARNINGS=0
          TESTS_PASSED=0
          TESTS_FAILED=0
          COVERAGE_FILES=0
          AUDIT_HIGH=0
          AUDIT_MODERATE=0
          FORMATTING_ISSUES=0
          
          # ESLint si existe configuraci√≥n
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            echo "Running ESLint analysis..."
            npx eslint . --format json --output-file eslint-results.json || true
            
            if [ -f "eslint-results.json" ]; then
              ESLINT_ERRORS=$(jq '[.[].messages[] | select(.severity == 2)] | length' eslint-results.json 2>/dev/null || echo "0")
              ESLINT_WARNINGS=$(jq '[.[].messages[] | select(.severity == 1)] | length' eslint-results.json 2>/dev/null || echo "0")
            fi
          else
            echo "ESLint configuration not found, skipping..."
          fi
          
          # Tests si existe package.json con script de test
          if [ -f "package.json" ] && jq -e '.scripts.test' package.json > /dev/null; then
            echo "Running tests..."
            npm test -- --coverage --json --outputFile=test-results.json || true
            
            if [ -f "test-results.json" ]; then
              TESTS_PASSED=$(jq '.numPassedTests // 0' test-results.json)
              TESTS_FAILED=$(jq '.numFailedTests // 0' test-results.json)
              COVERAGE_FILES=$(jq '.coverageMap // {} | keys | length' test-results.json)
            fi
          else
            echo "No test script found, skipping tests..."
          fi
          
          # Security audit si existe package.json
          if [ -f "package.json" ]; then
            echo "Running security audit..."
            npm audit --json > audit-results.json || true
            
            if [ -f "audit-results.json" ]; then
              AUDIT_HIGH=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "high") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
              AUDIT_MODERATE=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "moderate") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
            fi
          else
            echo "No package.json found, skipping security audit..."
          fi
          
          # Prettier si existe configuraci√≥n
          if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
            echo "Checking code formatting..."
            npx prettier --check . > prettier-results.txt 2>&1 || true
            
            if [ $? -ne 0 ]; then
              FORMATTING_ISSUES=$(cat prettier-results.txt | wc -l || echo "1")
            fi
          else
            echo "Prettier configuration not found, skipping formatting check..."
          fi
          
          # Guardar outputs
          echo "eslint_errors=$ESLINT_ERRORS" >> $GITHUB_OUTPUT
          echo "eslint_warnings=$ESLINT_WARNINGS" >> $GITHUB_OUTPUT
          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          echo "tests_failed=$TESTS_FAILED" >> $GITHUB_OUTPUT
          echo "coverage_files=$COVERAGE_FILES" >> $GITHUB_OUTPUT
          echo "audit_high=$AUDIT_HIGH" >> $GITHUB_OUTPUT
          echo "audit_moderate=$AUDIT_MODERATE" >> $GITHUB_OUTPUT
          echo "formatting_issues=$FORMATTING_ISSUES" >> $GITHUB_OUTPUT
          
          echo "Quality checks completed: $ESLINT_ERRORS errors, $TESTS_FAILED failed tests, $AUDIT_HIGH high vulnerabilities"

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > pr_diff.txt
          
          # Analizar estad√≠sticas del diff
          echo "Analyzing PR changes..."
          
          # Contar archivos modificados
          FILES_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | wc -l)
          
          # Contar l√≠neas agregadas y eliminadas
          DIFF_STATS=$(git diff --numstat ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          LINES_ADDED=$(echo "$DIFF_STATS" | awk '{sum += $1} END {print sum+0}')
          LINES_DELETED=$(echo "$DIFF_STATS" | awk '{sum += $2} END {print sum+0}')
          
          # Obtener lista de archivos por tipo
          MODIFIED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          JS_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' | wc -l || echo "0")
          CSS_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.(css|scss|sass|less)$' | wc -l || echo "0")
          JSON_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.json$' | wc -l || echo "0")
          MD_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.md$' | wc -l || echo "0")
          CONFIG_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.(yml|yaml|xml|config|env)$' | wc -l || echo "0")
          OTHER_FILES=$((FILES_CHANGED - JS_FILES - CSS_FILES - JSON_FILES - MD_FILES - CONFIG_FILES))
          
          # Generar resumen de cambios por archivo
          echo "## üìÅ Files Changed:" > pr_changes_summary.txt
          echo "" >> pr_changes_summary.txt
          echo "$MODIFIED_FILES" | head -20 | while read file; do
            if [ ! -z "$file" ]; then
              # Obtener stats por archivo
              FILE_STATS=$(git diff --numstat ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "$file")
              ADDED=$(echo "$FILE_STATS" | awk '{print $1}')
              DELETED=$(echo "$FILE_STATS" | awk '{print $2}')
              
              # Determinar el tipo de cambio
              if git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "$file" | grep -q "^A"; then
                STATUS="üÜï Added"
              elif git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "$file" | grep -q "^D"; then
                STATUS="üóëÔ∏è Deleted"
              elif git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "$file" | grep -q "^R"; then
                STATUS="üìù Renamed"
              else
                STATUS="‚úèÔ∏è Modified"
              fi
              
              echo "- **$file** $STATUS (+$ADDED/-$DELETED)" >> pr_changes_summary.txt
            fi
          done
          
          if [ $FILES_CHANGED -gt 20 ]; then
            echo "- ... and $((FILES_CHANGED - 20)) more files" >> pr_changes_summary.txt
          fi
          
          # Generar resumen inteligente del prop√≥sito del PR
          echo "" > pr_purpose_summary.txt
          echo "## üìù PR Summary" >> pr_purpose_summary.txt
          echo "" >> pr_purpose_summary.txt
          
          # Analizar patrones en los archivos para determinar el prop√≥sito
          PURPOSE=""
          DETAILS=""
          
          # Detectar cambios en CI/CD
          if echo "$MODIFIED_FILES" | grep -q "\.github/workflows"; then
            PURPOSE="CI/CD Pipeline Configuration"
            DETAILS="This PR modifies GitHub Actions workflows for continuous integration and deployment."
          elif echo "$MODIFIED_FILES" | grep -q "Dockerfile\|docker-compose"; then
            PURPOSE="Docker Configuration"
            DETAILS="This PR updates Docker containerization setup."
          elif echo "$MODIFIED_FILES" | grep -q "package\.json\|yarn\.lock\|package-lock\.json"; then
            if [ $JS_FILES -gt 0 ]; then
              PURPOSE="Feature Development & Dependencies"
              DETAILS="This PR includes new features or updates along with dependency changes."
            else
              PURPOSE="Dependency Updates"
              DETAILS="This PR focuses on updating project dependencies."
            fi
          elif echo "$MODIFIED_FILES" | grep -q "\.test\.\|\.spec\.\|__tests__"; then
            PURPOSE="Testing & Quality Assurance"
            DETAILS="This PR adds or improves test coverage and quality assurance."
          elif echo "$MODIFIED_FILES" | grep -q "README\|\.md$"; then
            if [ $FILES_CHANGED -eq $MD_FILES ]; then
              PURPOSE="Documentation Update"
              DETAILS="This PR focuses on improving project documentation."
            else
              PURPOSE="Feature Development with Documentation"
              DETAILS="This PR includes feature changes along with documentation updates."
            fi
          elif echo "$MODIFIED_FILES" | grep -q "\.css\|\.scss\|\.sass\|\.less"; then
            if [ $CSS_FILES -eq $FILES_CHANGED ]; then
              PURPOSE="UI/UX Styling Updates"
              DETAILS="This PR focuses on user interface and styling improvements."
            else
              PURPOSE="Feature Development with UI Changes"
              DETAILS="This PR includes functionality changes with user interface updates."
            fi
          elif echo "$MODIFIED_FILES" | grep -q "config\|\.env\|\.yml\|\.yaml\|\.xml"; then
            PURPOSE="Configuration Updates"
            DETAILS="This PR modifies application or environment configuration."
          elif [ $JS_FILES -gt 0 ]; then
            if [ $FILES_CHANGED -le 3 ]; then
              PURPOSE="Bug Fix or Minor Enhancement"
              DETAILS="This PR addresses specific issues or makes targeted improvements."
            else
              PURPOSE="Feature Development"
              DETAILS="This PR introduces new functionality or significant enhancements."
            fi
          else
            PURPOSE="General Updates"
            DETAILS="This PR contains miscellaneous updates and improvements."
          fi
          
          # Agregar informaci√≥n espec√≠fica basada en archivos
          SPECIFIC_CHANGES=""
          if echo "$MODIFIED_FILES" | grep -q "\.github/workflows.*\.yml"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- üîÑ GitHub Actions workflow automation"
          fi
          if echo "$MODIFIED_FILES" | grep -q "package\.json"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- üì¶ NPM dependencies and scripts"
          fi
          if echo "$MODIFIED_FILES" | grep -q "\.js\|\.jsx\|\.ts\|\.tsx"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- üíª JavaScript/TypeScript code changes"
          fi
          if echo "$MODIFIED_FILES" | grep -q "\.css\|\.scss"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- üé® Styling and visual updates"
          fi
          if echo "$MODIFIED_FILES" | grep -q "\.test\.\|\.spec\."; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- üß™ Test cases and quality assurance"
          fi
          if echo "$MODIFIED_FILES" | grep -q "README\|\.md"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- üìö Documentation improvements"
          fi
          if echo "$MODIFIED_FILES" | grep -q "Dockerfile\|docker"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- üê≥ Docker containerization"
          fi
          
          echo "**Purpose:** $PURPOSE" >> pr_purpose_summary.txt
          echo "" >> pr_purpose_summary.txt
          echo "$DETAILS" >> pr_purpose_summary.txt
          
          if [ ! -z "$SPECIFIC_CHANGES" ]; then
            echo "" >> pr_purpose_summary.txt
            echo "**Key Changes:**" >> pr_purpose_summary.txt
            echo -e "$SPECIFIC_CHANGES" >> pr_purpose_summary.txt
          fi
          
          # Guardar estad√≠sticas en outputs
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "lines_deleted=$LINES_DELETED" >> $GITHUB_OUTPUT
          echo "js_files=$JS_FILES" >> $GITHUB_OUTPUT
          echo "css_files=$CSS_FILES" >> $GITHUB_OUTPUT
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
          echo "md_files=$MD_FILES" >> $GITHUB_OUTPUT
          echo "config_files=$CONFIG_FILES" >> $GITHUB_OUTPUT
          echo "other_files=$OTHER_FILES" >> $GITHUB_OUTPUT

      - name: Call OpenAI API to generate comment
        id: openai
        env:
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
            # Crear resumen de an√°lisis
            ANALYSIS_SUMMARY="Code Analysis Results:
            - ESLint: ${{ steps.quality.outputs.eslint_errors }} errors, ${{ steps.quality.outputs.eslint_warnings }} warnings
            - Tests: ${{ steps.quality.outputs.tests_passed }} passed, ${{ steps.quality.outputs.tests_failed }} failed
            - Security: ${{ steps.quality.outputs.audit_high }} high, ${{ steps.quality.outputs.audit_moderate }} moderate vulnerabilities
            - Formatting: ${{ steps.quality.outputs.formatting_issues }} formatting issues"

            RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @- <<EOF
            {
            "model": "gpt-4o-mini",
            "messages": [
                {
                "role": "system",
                "content": "You are an expert code reviewer. Provide constructive, actionable feedback in a concise manner."
                },
                {
                "role": "user",
                "content": "Review this PR and provide helpful feedback. Analysis results:\n\n$ANALYSIS_SUMMARY\n\nPR Summary:\n$(cat pr_purpose_summary.txt)\n\nKey files changed (first 10 lines):\n$(head -10 pr_diff.txt)"
                }
            ],
            "max_tokens": 400
            }
            EOF
            )

            # Extraer error si existe
            ERROR=$(echo "$RESPONSE" | jq -r '.error.message // empty')

            if [ -n "$ERROR" ]; then
            echo "OpenAI API error detected: $ERROR" >&2
            echo "openai_failed=true" >> $GITHUB_OUTPUT
            echo "completions=OpenAI API failed: $ERROR" >> $GITHUB_OUTPUT
            else
            COMMENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
            if [ -z "$COMMENT" ] || [ "$COMMENT" = "null" ]; then
                COMMENT="No comment generated by AI."
            fi
            echo "openai_failed=false" >> $GITHUB_OUTPUT
            echo "completions=$COMMENT" >> $GITHUB_OUTPUT
            fi

      - name: Fallback to GitHub Copilot
        id: copilot
        if: steps.openai.outputs.openai_failed == 'true'
        run: |
            echo "Trying GitHub Copilot as fallback..."
            
            # Crear comentario de fallback l√≠nea por l√≠nea para evitar problemas de formato
            {
              echo "ü§ñ **AI Code Review (Fallback)**"
              echo ""
              echo "## üìä Automated Analysis Results"
              echo ""
              echo "### üîç ESLint Analysis"
              echo "- ‚ùå Errors: ${{ steps.quality.outputs.eslint_errors }}"
              echo "- ‚ö†Ô∏è Warnings: ${{ steps.quality.outputs.eslint_warnings }}"
              echo ""
              echo "### üß™ Test Results"
              echo "- ‚úÖ Passed: ${{ steps.quality.outputs.tests_passed }}"
              echo "- ‚ùå Failed: ${{ steps.quality.outputs.tests_failed }}"
              echo "- üìä Coverage: ${{ steps.quality.outputs.coverage_files }} files"
              echo ""
              echo "### üîí Security Audit"
              echo "- üö® High vulnerabilities: ${{ steps.quality.outputs.audit_high }}"
              echo "- ‚ö†Ô∏è Moderate vulnerabilities: ${{ steps.quality.outputs.audit_moderate }}"
              echo ""
              echo "### üíÖ Code Formatting"
              echo "- üìù Formatting issues: ${{ steps.quality.outputs.formatting_issues }}"
              echo ""
              echo "## üéØ Recommendations"
              echo ""
              if [ '${{ steps.quality.outputs.eslint_errors }}' -gt 0 ]; then
                echo "- üîß **Fix ESLint errors** before merging"
              fi
              if [ '${{ steps.quality.outputs.tests_failed }}' -gt 0 ]; then
                echo "- üß™ **Fix failing tests** to ensure code quality"
              fi
              if [ '${{ steps.quality.outputs.audit_high }}' -gt 0 ]; then
                echo "- üö® **Address high security vulnerabilities** immediately"
              fi
              if [ '${{ steps.quality.outputs.formatting_issues }}' -gt 0 ]; then
                echo "- üíÖ **Run prettier** to fix formatting issues"
              fi
              echo "- ‚úÖ Verify all changes work as expected"
              echo "- üìö Update documentation if needed"
              echo "- üîç Consider adding more tests for new functionality"
              echo ""
              echo "*Generated by fallback system due to OpenAI API limitations.*"
            } > copilot_comment.txt
            
            # Convertir el archivo a una sola l√≠nea con \n literales para GitHub output
            COPILOT_COMMENT=$(cat copilot_comment.txt | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "completions=$COPILOT_COMMENT" >> $GITHUB_OUTPUT

      - name: Generate Workflow Summary
        if: always()
        run: |
          echo "## üöÄ AI PR Review Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status | Results |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ‚úÖ | ${{ steps.quality.outputs.eslint_errors }} errors, ${{ steps.quality.outputs.eslint_warnings }} warnings |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ‚úÖ | ${{ steps.quality.outputs.tests_passed }} passed, ${{ steps.quality.outputs.tests_failed }} failed |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ‚úÖ | ${{ steps.quality.outputs.audit_high }} high, ${{ steps.quality.outputs.audit_moderate }} moderate vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          echo "| Formatting | ‚úÖ | ${{ steps.quality.outputs.formatting_issues }} issues |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ü§ñ AI Review Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.openai.outputs.openai_failed }}" = "true" ]; then
            echo "- ‚ö†Ô∏è OpenAI API: Failed (using fallback)" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Fallback System: Active" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ OpenAI API: Success" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Post comment to PR
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Obtener el comentario de OpenAI o Copilot
              let comment = `${{ steps.openai.outputs.completions }}` || `${{ steps.copilot.outputs.completions }}` || "No AI comment available.";
              
              // Convertir \n literales a saltos de l√≠nea reales
              comment = comment.replace(/\\n/g, '\n');
              
              // Limitar el tama√±o del comentario si es muy largo
              if (comment.length > 65000) {
                comment = comment.substring(0, 65000) + '\n\n*Comment truncated due to length limitations.*';
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: comment,
              });
              
              console.log('Comment posted successfully');
              console.log('Comment length:', comment.length);
            } catch (error) {
              console.error('Failed to post comment:', error);
              
              // Try to post a fallback comment
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: 'ü§ñ AI PR review attempted but encountered an issue. Please review manually.\n\nError: ' + error.message,
                });
              } catch (fallbackError) {
                console.error('Failed to post fallback comment:', fallbackError);
                throw error; // Re-throw original error
              }
            }

      - name: Update PR Description with AI Analysis
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Variables de an√°lisis
              const eslintErrors = '${{ steps.quality.outputs.eslint_errors }}';
              const eslintWarnings = '${{ steps.quality.outputs.eslint_warnings }}';
              const testsPassed = '${{ steps.quality.outputs.tests_passed }}';
              const testsFailed = '${{ steps.quality.outputs.tests_failed }}';
              const auditHigh = '${{ steps.quality.outputs.audit_high }}';
              const auditModerate = '${{ steps.quality.outputs.audit_moderate }}';
              const formattingIssues = '${{ steps.quality.outputs.formatting_issues }}';
              
              // Variables de cambios del PR
              const filesChanged = '${{ steps.diff.outputs.files_changed }}';
              const linesAdded = '${{ steps.diff.outputs.lines_added }}';
              const linesDeleted = '${{ steps.diff.outputs.lines_deleted }}';
              const jsFiles = '${{ steps.diff.outputs.js_files }}';
              const cssFiles = '${{ steps.diff.outputs.css_files }}';
              const jsonFiles = '${{ steps.diff.outputs.json_files }}';
              const mdFiles = '${{ steps.diff.outputs.md_files }}';
              const configFiles = '${{ steps.diff.outputs.config_files }}';
              const otherFiles = '${{ steps.diff.outputs.other_files }}';
              
              // Leer el resumen de archivos cambiados y el prop√≥sito del PR
              const fs = require('fs');
              let fileChangesSummary = '';
              let purposeSummary = '';
              
              try {
                fileChangesSummary = fs.readFileSync('pr_changes_summary.txt', 'utf8');
              } catch (error) {
                fileChangesSummary = 'Unable to read file changes summary.';
              }
              
              try {
                purposeSummary = fs.readFileSync('pr_purpose_summary.txt', 'utf8');
              } catch (error) {
                purposeSummary = '**Purpose:** General Updates\n\nThis PR contains updates and improvements to the codebase.';
              }
              
              // Construir tabla de estad√≠sticas de cambios
              const changesTable = [
                '| Metric | Count |',
                '|--------|-------|',
                `| Files Changed | ${filesChanged} |`,
                `| Lines Added | +${linesAdded} |`,
                `| Lines Deleted | -${linesDeleted} |`,
                `| Net Change | ${parseInt(linesAdded) - parseInt(linesDeleted)} |`
              ].join('\n');
              
              // Construir tabla de tipos de archivos
              const fileTypesTable = [
                '| File Type | Count |',
                '|-----------|-------|',
                `| JavaScript/TypeScript | ${jsFiles} |`,
                `| CSS/Styling | ${cssFiles} |`,
                `| JSON | ${jsonFiles} |`,
                `| Markdown | ${mdFiles} |`,
                `| Config Files | ${configFiles} |`,
                `| Other | ${otherFiles} |`
              ].join('\n');
              
              // Construir la tabla de m√©tricas de calidad
              const metricsTable = [
                '| Metric | Result |',
                '|--------|--------|',
                `| ESLint Errors | ${eslintErrors} |`,
                `| ESLint Warnings | ${eslintWarnings} |`,
                `| Tests Passed | ${testsPassed} |`,
                `| Tests Failed | ${testsFailed} |`,
                `| High Security Issues | ${auditHigh} |`,
                `| Moderate Security Issues | ${auditModerate} |`,
                `| Formatting Issues | ${formattingIssues} |`
              ].join('\n');
              
              // Crear secci√≥n de estado r√°pido
              const quickStatus = [
                `${eslintErrors === '0' ? '‚úÖ' : '‚ùå'} **ESLint**: ${eslintErrors === '0' ? 'No errors' : eslintErrors + ' errors found'}`,
                `${testsFailed === '0' ? '‚úÖ' : '‚ùå'} **Tests**: ${testsFailed === '0' ? 'All passing' : testsFailed + ' tests failing'}`,
                `${auditHigh === '0' ? '‚úÖ' : 'üö®'} **Security**: ${auditHigh === '0' ? 'No high vulnerabilities' : auditHigh + ' high vulnerabilities'}`,
                `${formattingIssues === '0' ? '‚úÖ' : 'üíÖ'} **Formatting**: ${formattingIssues === '0' ? 'Well formatted' : 'Needs formatting'}`
              ].join('\n');
              
              // Construir la descripci√≥n completa del PR (reemplaza todo el contenido)
              const newBody = [
                '## üöÄ PR Changes Summary',
                '',
                purposeSummary,
                '',
                '### üìä Change Statistics',
                changesTable,
                '',
                '### üìÅ File Types Modified',
                fileTypesTable,
                '',
                fileChangesSummary,
                '',
                '---',
                '',
                '## ü§ñ AI Analysis Summary',
                '',
                '### üìä Code Quality Metrics',
                metricsTable,
                '',
                '### üéØ Quick Status',
                quickStatus,
                '',
                `*Last updated: ${new Date().toISOString()}*`
              ].join('\n');
              
              // Reemplazar completamente la descripci√≥n del PR
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: newBody,
              });
              
              console.log('PR description replaced successfully');
            } catch (error) {
              console.error('Failed to update PR description:', error);
              // No fallar el workflow si esto falla
            }

      - name: Cleanup temporary files
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -f pr_diff.txt eslint-results.json test-results.json audit-results.json
          rm -f prettier-results.txt pr_changes_summary.txt pr_purpose_summary.txt copilot_comment.txt
          echo "Cleanup completed"

