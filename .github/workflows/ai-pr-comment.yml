name: GitHub Copilot-Style AI PR Review

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-comment:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Necesario para análisis completo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "Installing dependencies..."
            npm ci --no-audit --no-fund --ignore-scripts
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Validate project structure
        run: |
          echo "Validating project structure..."
          echo "📦 Package.json exists: $([ -f "package.json" ] && echo "✅" || echo "❌")"
          echo "🔧 ESLint config: $([ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] && echo "✅" || echo "❌")"
          echo "💅 Prettier config: $([ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] && echo "✅" || echo "❌")"
          echo "🧪 Jest config: $([ -f "jest.config.js" ] && echo "✅" || echo "❌")"

          if [ -f "package.json" ]; then
            echo "📜 Available npm scripts:"
            jq -r '.scripts | keys[]' package.json 2>/dev/null || echo "No scripts found"
          fi

      - name: Run ESLint Analysis
        id: eslint
        continue-on-error: true
        run: |
          echo "🔍 Running ESLint analysis..."
          if ([ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]) && jq -e '.scripts.lint' package.json > /dev/null 2>&1; then
            npm run lint -- --format json --output-file eslint-results.json || true
            ESLINT_ERRORS=$(jq '[.[].messages[] | select(.severity == 2)] | length' eslint-results.json 2>/dev/null || echo "0")
            ESLINT_WARNINGS=$(jq '[.[].messages[] | select(.severity == 1)] | length' eslint-results.json 2>/dev/null || echo "0")
            echo "::set-output name=eslint_errors::$ESLINT_ERRORS"
            echo "::set-output name=eslint_warnings::$ESLINT_WARNINGS"
            echo "Found $ESLINT_ERRORS errors and $ESLINT_WARNINGS warnings"
          else
            echo "No ESLint configuration found"
            echo "::set-output name=eslint_errors::0"
            echo "::set-output name=eslint_warnings::0"
          fi

      - name: Run Tests
        id: tests
        continue-on-error: true
        run: |
          echo "🧪 Running tests..."
          if jq -e '.scripts.test' package.json > /dev/null 2>&1; then
            npm test -- --coverage --json --outputFile=test-results.json || true
            TESTS_PASSED=$(jq '.numPassedTests // 0' test-results.json 2>/dev/null || echo "0")
            TESTS_FAILED=$(jq '.numFailedTests // 0' test-results.json 2>/dev/null || echo "0")
            echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
            echo "tests_failed=$TESTS_FAILED" >> $GITHUB_OUTPUT
            echo "$TESTS_PASSED tests passed, $TESTS_FAILED tests failed"
          else
            echo "No test script found"
            echo "::set-output name=tests_passed::0"
            echo "::set-output name=tests_failed::0"
          fi

      - name: Run Security Audit
        id: security
        continue-on-error: true
        run: |
          echo "🔒 Running security audit..."
          npm audit --json > audit-results.json || true
          AUDIT_HIGH=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "high") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
          AUDIT_MODERATE=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "moderate") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
          echo "audit_high=$AUDIT_HIGH" >> $GITHUB_OUTPUT
          echo "audit_moderate=$AUDIT_MODERATE" >> $GITHUB_OUTPUT
          echo "Found $AUDIT_HIGH high and $AUDIT_MODERATE moderate vulnerabilities"

      - name: Check Code Formatting
        id: formatting
        continue-on-error: true
        run: |
          echo "💅 Checking code formatting..."
          if ([ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]); then
            npx prettier --check . > prettier-results.txt 2>&1 || PRETTIER_EXIT_CODE=$?
            if [ "${PRETTIER_EXIT_CODE:-0}" -ne 0 ]; then
              FORMATTING_ISSUES=$(cat prettier-results.txt | wc -l || echo "1")
            else
              FORMATTING_ISSUES=0
            fi
            echo "formatting_issues=$FORMATTING_ISSUES" >> $GITHUB_OUTPUT
            echo "Found $FORMATTING_ISSUES formatting issues"
          else
            echo "No Prettier configuration found"
            echo "::set-output name=formatting_issues::0"
          fi

      - name: Collect Quality Metrics
        id: quality
        run: |

          # Verificar si existe package.json antes de continuar
          if [ ! -f "package.json" ]; then
            echo "No package.json found, skipping all npm-based checks..."
            echo "eslint_errors=0" >> $GITHUB_OUTPUT
            echo "eslint_warnings=0" >> $GITHUB_OUTPUT
            echo "tests_passed=0" >> $GITHUB_OUTPUT
            echo "tests_failed=0" >> $GITHUB_OUTPUT
            echo "coverage_files=0" >> $GITHUB_OUTPUT
            echo "audit_high=0" >> $GITHUB_OUTPUT
            echo "audit_moderate=0" >> $GITHUB_OUTPUT
            echo "formatting_issues=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # ESLint solo si existe configuración Y script
          if ([ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]) && jq -e '.scripts.lint' package.json > /dev/null 2>&1; then
            echo "Running ESLint analysis..."
            npm run lint -- --format json --output-file eslint-results.json 2>/dev/null || true
            
            if [ -f "eslint-results.json" ]; then
              ESLINT_ERRORS=$(jq '[.[].messages[] | select(.severity == 2)] | length' eslint-results.json 2>/dev/null || echo "0")
              ESLINT_WARNINGS=$(jq '[.[].messages[] | select(.severity == 1)] | length' eslint-results.json 2>/dev/null || echo "0")
            fi
          elif [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            echo "ESLint config found but no 'lint' script in package.json, running directly..."
            npx eslint . --format json --output-file eslint-results.json 2>/dev/null || true
            
            if [ -f "eslint-results.json" ]; then
              ESLINT_ERRORS=$(jq '[.[].messages[] | select(.severity == 2)] | length' eslint-results.json 2>/dev/null || echo "0")
              ESLINT_WARNINGS=$(jq '[.[].messages[] | select(.severity == 1)] | length' eslint-results.json 2>/dev/null || echo "0")
            fi
          else
            echo "ESLint configuration not found, skipping..."
          fi

          # Tests solo si existe script de test
          if jq -e '.scripts.test' package.json > /dev/null 2>&1; then
            echo "Running tests..."
            npm test -- --coverage --json --outputFile=test-results.json 2>/dev/null || true
            
            if [ -f "test-results.json" ]; then
              TESTS_PASSED=$(jq '.numPassedTests // 0' test-results.json 2>/dev/null || echo "0")
              TESTS_FAILED=$(jq '.numFailedTests // 0' test-results.json 2>/dev/null || echo "0")
              COVERAGE_FILES=$(jq '.coverageMap // {} | keys | length' test-results.json 2>/dev/null || echo "0")
            fi
          else
            echo "No test script found in package.json, skipping tests..."
          fi

          # Security audit
          echo "Running security audit..."
          npm audit --json > audit-results.json 2>/dev/null || true

          if [ -f "audit-results.json" ]; then
            AUDIT_HIGH=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "high") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
            AUDIT_MODERATE=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "moderate") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
          fi

          # Prettier solo si existe configuración Y script
          if ([ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]) && jq -e '.scripts.format' package.json > /dev/null 2>&1; then
            echo "Checking code formatting with npm script..."
            npm run format:check > prettier-results.txt 2>&1 || PRETTIER_EXIT_CODE=$?
            
            if [ "${PRETTIER_EXIT_CODE:-0}" -ne 0 ]; then
              FORMATTING_ISSUES=$(cat prettier-results.txt | wc -l || echo "1")
            fi
          elif [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
            echo "Prettier config found but no 'format' script, checking directly..."
            npx prettier --check . > prettier-results.txt 2>&1 || PRETTIER_EXIT_CODE=$?
            
            if [ "${PRETTIER_EXIT_CODE:-0}" -ne 0 ]; then
              FORMATTING_ISSUES=$(cat prettier-results.txt | wc -l || echo "1")
            fi
          else
            echo "Prettier configuration not found, skipping formatting check..."
          fi

          # Guardar outputs
          echo "eslint_errors=$ESLINT_ERRORS" >> $GITHUB_OUTPUT
          echo "eslint_warnings=$ESLINT_WARNINGS" >> $GITHUB_OUTPUT
          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          echo "tests_failed=$TESTS_FAILED" >> $GITHUB_OUTPUT
          echo "coverage_files=$COVERAGE_FILES" >> $GITHUB_OUTPUT
          echo "audit_high=$AUDIT_HIGH" >> $GITHUB_OUTPUT
          echo "audit_moderate=$AUDIT_MODERATE" >> $GITHUB_OUTPUT
          echo "formatting_issues=$FORMATTING_ISSUES" >> $GITHUB_OUTPUT

          echo "Quality checks completed: $ESLINT_ERRORS errors, $TESTS_FAILED failed tests, $AUDIT_HIGH high vulnerabilities"

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > pr_diff.txt

          # Analizar estadísticas del diff
          echo "Analyzing PR changes..."

          # Contar archivos modificados
          FILES_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | wc -l)

          # Contar líneas agregadas y eliminadas
          DIFF_STATS=$(git diff --numstat ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          LINES_ADDED=$(echo "$DIFF_STATS" | awk '{sum += $1} END {print sum+0}')
          LINES_DELETED=$(echo "$DIFF_STATS" | awk '{sum += $2} END {print sum+0}')

          # Obtener lista de archivos por tipo
          MODIFIED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          JS_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' | wc -l || echo "0")
          CSS_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.(css|scss|sass|less)$' | wc -l || echo "0")
          JSON_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.json$' | wc -l || echo "0")
          MD_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.md$' | wc -l || echo "0")
          CONFIG_FILES=$(echo "$MODIFIED_FILES" | grep -E '\.(yml|yaml|xml|config|env)$' | wc -l || echo "0")
          OTHER_FILES=$((FILES_CHANGED - JS_FILES - CSS_FILES - JSON_FILES - MD_FILES - CONFIG_FILES))

          # Generar resumen de cambios por archivo
          echo "## 📁 Files Changed:" > pr_changes_summary.txt
          echo "" >> pr_changes_summary.txt
          echo "$MODIFIED_FILES" | head -20 | while read file; do
            if [ ! -z "$file" ]; then
              # Obtener stats por archivo
              FILE_STATS=$(git diff --numstat ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "$file")
              ADDED=$(echo "$FILE_STATS" | awk '{print $1}')
              DELETED=$(echo "$FILE_STATS" | awk '{print $2}')
              
              # Determinar el tipo de cambio
              if git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "$file" | grep -q "^A"; then
                STATUS="🆕 Added"
              elif git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "$file" | grep -q "^D"; then
                STATUS="🗑️ Deleted"
              elif git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "$file" | grep -q "^R"; then
                STATUS="📝 Renamed"
              else
                STATUS="✏️ Modified"
              fi
              
              echo "- **$file** $STATUS (+$ADDED/-$DELETED)" >> pr_changes_summary.txt
            fi
          done

          if [ $FILES_CHANGED -gt 20 ]; then
            echo "- ... and $((FILES_CHANGED - 20)) more files" >> pr_changes_summary.txt
          fi

          # Generar resumen inteligente del propósito del PR usando OpenAI
          echo "" > pr_purpose_summary.txt
          echo "## 📝 PR Summary" >> pr_purpose_summary.txt
          echo "" >> pr_purpose_summary.txt

          # Preparar el contexto para el análisis de IA
          PR_CONTEXT=$(cat << EOF
          Changed files:
          $MODIFIED_FILES

          Statistics:
          - Total files changed: $FILES_CHANGED
          - JavaScript/TypeScript files: $JS_FILES
          - CSS files: $CSS_FILES
          - JSON files: $JSON_FILES
          - Markdown files: $MD_FILES
          - Configuration files: $CONFIG_FILES
          - Lines added: $LINES_ADDED
          - Lines deleted: $LINES_DELETED

          PR Title: $PR_TITLE
          PR Description: $PR_DESCRIPTION
          EOF
          )

          # Llamar a OpenAI API para análisis
          OPENAI_RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"gpt-3.5-turbo\",
              \"messages\": [
                {
                  \"role\": \"system\",
                  \"content\": \"You are an expert code reviewer analyzing Pull Request changes. Analyze the provided context and determine the primary purpose and key details of the PR. Be concise but informative. Return only a JSON object with 'purpose' (a short title) and 'details' (a one-sentence description) keys.\"
                },
                {
                  \"role\": \"user\",
                  \"content\": \"$PR_CONTEXT\"
                }
              ],
              \"temperature\": 0.3
            }"
          )

          # Extraer PURPOSE y DETAILS del resultado de la IA
          PURPOSE=$(echo $OPENAI_RESPONSE | jq -r '.choices[0].message.content' | jq -r '.purpose')
          DETAILS=$(echo $OPENAI_RESPONSE | jq -r '.choices[0].message.content' | jq -r '.details')
          # Si la llamada a la API falla, usar análisis avanzado basado en patrones (estilo Copilot)
          if [ -z "$PURPOSE" ] || [ -z "$DETAILS" ]; then
            echo "OpenAI API analysis failed, using GitHub Copilot-style pattern analysis..."

            # Análisis avanzado basado en el contenido del PR
            PR_CONTENT=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
            
            # Detectar patrones de cambio específicos
            CONTAINS_TESTS=$(echo "$PR_CONTENT" | grep -iE 'test|spec|assert|describe|it\(' && echo "true" || echo "false")
            CONTAINS_DOCS=$(echo "$PR_CONTENT" | grep -iE 'readme|documentation|docs|comment|/**' && echo "true" || echo "false")
            CONTAINS_SECURITY=$(echo "$PR_CONTENT" | grep -iE 'security|auth|password|encrypt|token' && echo "true" || echo "false")
            CONTAINS_PERF=$(echo "$PR_CONTENT" | grep -iE 'performance|optimize|cache|speed|timeout' && echo "true" || echo "false")
            CONTAINS_API=$(echo "$PR_CONTENT" | grep -iE 'api|endpoint|route|controller|service' && echo "true" || echo "false")
            CONTAINS_UI=$(echo "$PR_CONTENT" | grep -iE 'component|style|css|layout|template' && echo "true" || echo "false")
            
            # Análisis inteligente del propósito del PR
            if [[ "$CONTAINS_TESTS" == "true" ]]; then
              PURPOSE="Test Enhancement"
              DETAILS="This PR improves test coverage and quality assurance measures."
            elif [[ "$CONTAINS_SECURITY" == "true" ]]; then
              PURPOSE="Security Improvement"
              DETAILS="This PR enhances security measures and authentication processes."
            elif [[ "$CONTAINS_DOCS" == "true" ]]; then
              PURPOSE="Documentation Update"
              DETAILS="This PR improves code documentation and project guides."
            elif [[ "$CONTAINS_PERF" == "true" ]]; then
              PURPOSE="Performance Optimization"
              DETAILS="This PR includes performance improvements and optimizations."
            elif [[ "$CONTAINS_API" == "true" ]]; then
              PURPOSE="API Enhancement"
              DETAILS="This PR modifies API functionality and endpoints."
            elif [[ "$CONTAINS_UI" == "true" ]]; then
              PURPOSE="UI/UX Update"
              DETAILS="This PR includes user interface and experience improvements."
            else
              # Análisis basado en estadísticas de cambio
              if [ $JS_FILES -gt 0 ]; then
                PURPOSE="Code Enhancement"
                DETAILS="This PR updates application logic and functionality."
              elif [ $CONFIG_FILES -gt 0 ]; then
                PURPOSE="Configuration Update"
                DETAILS="This PR modifies project configuration and settings."
              else
                PURPOSE="General Update"
                DETAILS="This PR includes various improvements across the project."
              fi
            fi

            # Intentar extraer PURPOSE y DETAILS del segundo intento
            FALLBACK_PURPOSE=$(echo $OPENAI_RESPONSE | jq -r '.choices[0].message.content' | jq -r '.purpose')
            FALLBACK_DETAILS=$(echo $OPENAI_RESPONSE | jq -r '.choices[0].message.content' | jq -r '.details')

            # Usar resultados del fallback si están disponibles
            if [ ! -z "$FALLBACK_PURPOSE" ] && [ ! -z "$FALLBACK_DETAILS" ]; then
              PURPOSE=$FALLBACK_PURPOSE
              DETAILS=$FALLBACK_DETAILS
            else
              # Último recurso: Análisis básico basado en tipos de archivo
              if [ $MD_FILES -gt 0 ]; then
                PURPOSE="Documentation Update"
                DETAILS="This PR includes documentation changes and improvements."
              elif [ $JS_FILES -gt 0 ]; then
                PURPOSE="Code Changes"
                DETAILS="This PR modifies application logic and functionality."
              elif [ $CONFIG_FILES -gt 0 ]; then
                PURPOSE="Configuration Update"
                DETAILS="This PR updates project configuration and settings."
              else
                PURPOSE="General Updates"
                DETAILS="This PR contains various improvements and updates."
              fi
            fi
          fi

          # Agregar información específica basada en archivos
          SPECIFIC_CHANGES=""
          if echo "$MODIFIED_FILES" | grep -q "\.github/workflows.*\.yml"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- 🔄 GitHub Actions workflow automation"
          fi
          if echo "$MODIFIED_FILES" | grep -q "package\.json"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- 📦 NPM dependencies and scripts"
          fi
          if echo "$MODIFIED_FILES" | grep -q "\.js\|\.jsx\|\.ts\|\.tsx"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- 💻 JavaScript/TypeScript code changes"
          fi
          if echo "$MODIFIED_FILES" | grep -q "\.css\|\.scss"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- 🎨 Styling and visual updates"
          fi
          if echo "$MODIFIED_FILES" | grep -q "\.test\.\|\.spec\."; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- 🧪 Test cases and quality assurance"
          fi
          if echo "$MODIFIED_FILES" | grep -q "README\|\.md"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- 📚 Documentation improvements"
          fi
          if echo "$MODIFIED_FILES" | grep -q "Dockerfile\|docker"; then
            SPECIFIC_CHANGES="$SPECIFIC_CHANGES\n- 🐳 Docker containerization"
          fi

          echo "**Purpose:** $PURPOSE" >> pr_purpose_summary.txt
          echo "" >> pr_purpose_summary.txt
          echo "$DETAILS" >> pr_purpose_summary.txt

          # Escribir el análisis de la IA
          echo "**🤖 AI Analysis**" >> pr_purpose_summary.txt
          echo "" >> pr_purpose_summary.txt
          echo "**Purpose:** $PURPOSE" >> pr_purpose_summary.txt
          echo "" >> pr_purpose_summary.txt
          echo "$DETAILS" >> pr_purpose_summary.txt
          
          # Agregar detalles específicos si están disponibles
          if [ ! -z "$SPECIFIC_CHANGES" ]; then
            echo "" >> pr_purpose_summary.txt
            echo "**🔍 Detected Changes:**" >> pr_purpose_summary.txt
            echo -e "$SPECIFIC_CHANGES" >> pr_purpose_summary.txt
          fi
          
          # Agregar estadísticas del PR
          echo "" >> pr_purpose_summary.txt
          echo "**📊 PR Statistics:**" >> pr_purpose_summary.txt
          echo "- Files modified: $FILES_CHANGED" >> pr_purpose_summary.txt
          echo "- Lines added: +$LINES_ADDED" >> pr_purpose_summary.txt
          echo "- Lines removed: -$LINES_DELETED" >> pr_purpose_summary.txt

          # Guardar estadísticas en outputs
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "lines_deleted=$LINES_DELETED" >> $GITHUB_OUTPUT
          echo "js_files=$JS_FILES" >> $GITHUB_OUTPUT
          echo "css_files=$CSS_FILES" >> $GITHUB_OUTPUT
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
          echo "md_files=$MD_FILES" >> $GITHUB_OUTPUT
          echo "config_files=$CONFIG_FILES" >> $GITHUB_OUTPUT
          echo "other_files=$OTHER_FILES" >> $GITHUB_OUTPUT

      - name: Call OpenAI API to generate comment
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Crear contexto detallado del PR
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_DESCRIPTION="${{ github.event.pull_request.body }}"

          # Obtener archivos modificados con más detalle
          MODIFIED_FILES_DETAIL=$(git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})

            RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d '{
              "model": "gpt-4",
              "messages": [
                {
                  "role": "system",
                  "content": "You are GitHub Copilot, an AI assistant that provides comprehensive and insightful code reviews. Analyze the PR like GitHub Copilot would: focus on code quality, architecture, potential issues, best practices, and provide constructive feedback. Format your response in markdown with clear sections. Be thorough but concise. Include specific suggestions and highlight both positive aspects and areas for improvement."
                },
                {
                  "role": "user",
                  "content": "## Pull Request Review\n\n**Title:** '"$PR_TITLE"'\n\n**Description:** '"$PR_DESCRIPTION"'\n\n## Files Changed\n'"$MODIFIED_FILES_DETAIL"'\n\n## Purpose Analysis\n'"$PURPOSE_SUMMARY"'\n\n## Changes Overview\n'"$CHANGES_SUMMARY"'\n\n## Code Quality Metrics\n'"$QUALITY_ANALYSIS"'\n\n## Key Code Changes (Sample)\n```diff\n'"$IMPORTANT_DIFF"'\n```\n\nPlease provide a comprehensive GitHub Copilot-style review of this PR, including:\n1. **Overall Assessment** - High-level summary of the PR\n2. **Code Quality Review** - Analysis of the changes\n3. **Architecture & Design** - Comments on structure and patterns\n4. **Security & Best Practices** - Security considerations\n5. **Recommendations** - Specific actionable suggestions\n6. **Positive Highlights** - What'\''s done well\n\nFormat the response as a professional code review comment."
                }
              ],
              "max_tokens": 1000,
              "temperature": 0.2
            }')


          # Crear análisis de calidad
          QUALITY_ANALYSIS="Code Quality Analysis:
          - ESLint: ${{ steps.quality.outputs.eslint_errors }} errors, ${{ steps.quality.outputs.eslint_warnings }} warnings
          - Tests: ${{ steps.quality.outputs.tests_passed }} passed, ${{ steps.quality.outputs.tests_failed }} failed
          - Security: ${{ steps.quality.outputs.audit_high }} high vulnerabilities, ${{ steps.quality.outputs.audit_moderate }} moderate
          - Formatting: ${{ steps.quality.outputs.formatting_issues }} issues detected"

          # Obtener diff de los archivos más importantes (primeros 50 líneas)
          IMPORTANT_DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | head -50)

          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -d '{
            "model": "gpt-4",
            "messages": [
              {
                "role": "system",
                "content": "You are GitHub Copilot, an AI assistant that provides comprehensive and insightful code reviews. Analyze the PR like GitHub Copilot would: focus on code quality, architecture, potential issues, best practices, and provide constructive feedback. Format your response in markdown with clear sections. Be thorough but concise. Include specific suggestions and highlight both positive aspects and areas for improvement."
              },
              {
                "role": "user",
                "content": "## Pull Request Review\n\n**Title:** '"$PR_TITLE"'\n\n**Description:** '"$PR_DESCRIPTION"'\n\n## Files Changed\n'"$MODIFIED_FILES_DETAIL"'\n\n## Purpose Analysis\n'"$PURPOSE_SUMMARY"'\n\n## Changes Overview\n'"$CHANGES_SUMMARY"'\n\n## Code Quality Metrics\n'"$QUALITY_ANALYSIS"'\n\n## Key Code Changes (Sample)\n```diff\n'"$IMPORTANT_DIFF"'\n```\n\nPlease provide a comprehensive GitHub Copilot-style review of this PR, including:\n1. **Overall Assessment** - High-level summary of the PR\n2. **Code Quality Review** - Analysis of the changes\n3. **Architecture & Design** - Comments on structure and patterns\n4. **Security & Best Practices** - Security considerations\n5. **Recommendations** - Specific actionable suggestions\n6. **Positive Highlights** - What'\''s done well\n\nFormat the response as a professional code review comment."
              }
            ],
            "max_tokens": 1000,
            "temperature": 0.2
          }')

          # Extraer error si existe
          ERROR=$(echo "$RESPONSE" | jq -r '.error.message // empty')

          if [ -n "$ERROR" ]; then
          echo "OpenAI API error detected: $ERROR" >&2
          echo "openai_failed=true" >> $GITHUB_OUTPUT
          echo "completions=OpenAI API failed: $ERROR" >> $GITHUB_OUTPUT
          else
          COMMENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          if [ -z "$COMMENT" ] || [ "$COMMENT" = "null" ]; then
              COMMENT="No comment generated by AI."
          fi
          echo "openai_failed=false" >> $GITHUB_OUTPUT
          echo "completions=$COMMENT" >> $GITHUB_OUTPUT
          fi

      - name: Enhanced Copilot-Style Fallback Review
        id: copilot
        if: steps.openai.outputs.openai_failed == 'true'
        run: |
          echo "Generating enhanced GitHub Copilot-style review..."

          # Obtener información detallada del PR
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          FILES_CHANGED="${{ steps.diff.outputs.files_changed }}"
          
          # Análisis avanzado del contenido
          DIFF_CONTENT=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Detectar patrones específicos para un análisis más preciso
          CONTAINS_BREAKING_CHANGES=$(echo "$DIFF_CONTENT" | grep -iE 'BREAKING|DEPRECATED|REMOVAL' && echo "true" || echo "false")
          CONTAINS_DEPENDENCIES=$(echo "$PR_BODY$DIFF_CONTENT" | grep -iE 'dependency|upgrade|update|bump|version' && echo "true" || echo "false")
          CONTAINS_MIGRATIONS=$(echo "$DIFF_CONTENT" | grep -iE 'migration|schema|database|model' && echo "true" || echo "false")

          # Determinar el tipo de PR basado en archivos modificados y contenido
          MODIFIED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Analizar el contenido de los cambios para una mejor clasificación
          DIFF_CONTENT=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Determinar el propósito principal del PR
          if echo "$PR_TITLE" | grep -iE "fix|bug|issue|error|crash|problem|resolve" > /dev/null; then
            PR_TYPE="🐛 Bug Fix"
            PR_DESCRIPTION="This PR addresses and resolves issues in the codebase."
          elif echo "$PR_TITLE" | grep -iE "feat|feature|add|new|implement" > /dev/null; then
            PR_TYPE="✨ New Feature"
            PR_DESCRIPTION="This PR introduces new functionality to the application."
          elif echo "$PR_TITLE" | grep -iE "doc|docs|document|readme" > /dev/null; then
            PR_TYPE="📚 Documentation"
            PR_DESCRIPTION="This PR improves project documentation and guides."
          elif echo "$PR_TITLE" | grep -iE "test|spec|coverage" > /dev/null; then
            PR_TYPE="🧪 Testing"
            PR_DESCRIPTION="This PR enhances test coverage and quality assurance."
          elif echo "$PR_TITLE" | grep -iE "refactor|clean|improve|enhance" > /dev/null; then
            PR_TYPE="♻️ Refactoring"
            PR_DESCRIPTION="This PR improves code quality through refactoring."
          elif echo "$PR_TITLE" | grep -iE "ci|cd|pipeline|workflow|deploy" > /dev/null; then
            PR_TYPE="🔄 CI/CD"
            PR_DESCRIPTION="This PR updates deployment and automation processes."
          else
            PR_TYPE="🔧 General Update"
            PR_DESCRIPTION="This PR contains various improvements and updates."
          fi

          # Generar review estilo GitHub Copilot con análisis mejorado
          {
            echo "## 🚀 PR Changes Summary"
            echo ""
            echo "### 📝 PR Summary"
            echo ""
            echo "**Purpose:** ${PR_TYPE}"
            echo ""
            echo "${PR_DESCRIPTION}"
            echo ""
            echo "### 🤖 AI Analysis"
            echo ""
            echo "**Purpose:** ${PR_TYPE}"
            echo ""
            echo "${PR_DESCRIPTION}"
            echo ""
            echo "### 📊 Detailed Analysis"
            echo ""
            
            # Analizar el tipo de PR
            if echo "$MODIFIED_FILES" | grep -q "README\|\.md"; then
              if echo "$MODIFIED_FILES" | grep -q "package\.json\|user-stories"; then
                echo "This PR appears to be adding **comprehensive project documentation and metadata** for the pet accessories chatbot API. The changes transform a basic repository into a well-documented, production-ready project with detailed user stories, contribution guidelines, and improved project metadata."
              else
                echo "This PR focuses on **documentation improvements** to enhance project clarity and developer experience."
              fi
            elif echo "$MODIFIED_FILES" | grep -q "\.yml\|\.yaml"; then
              echo "This PR contains **CI/CD pipeline modifications** that will affect the automated workflows and deployment processes."
            elif echo "$MODIFIED_FILES" | grep -q "\.js\|\.ts"; then
              echo "This PR includes **code changes** to the application logic and functionality."
            else
              echo "This PR contains **configuration and setup changes** for the project."
            fi
            
            echo ""
            echo "### Key Changes Summary"
            echo ""
            echo "- 📁 **$FILES_CHANGED files modified** across multiple project areas"
            echo "- ➕ **${{ steps.diff.outputs.lines_added }} lines added**"
            echo "- ➖ **${{ steps.diff.outputs.lines_deleted }} lines removed**"
            
            if [ '${{ steps.diff.outputs.js_files }}' -gt 0 ]; then
              echo "- 💻 **JavaScript/TypeScript changes** detected"
            fi
            if [ '${{ steps.diff.outputs.md_files }}' -gt 0 ]; then
              echo "- 📚 **Documentation updates** included"
            fi
            if [ '${{ steps.diff.outputs.json_files }}' -gt 0 ]; then
              echo "- ⚙️ **Configuration modifications** present"
            fi
            
            echo ""
            echo "### Code Quality Assessment"
            echo ""
            
            # Estado general
            if [ '${{ steps.quality.outputs.eslint_errors }}' -eq 0 ] && [ '${{ steps.quality.outputs.tests_failed }}' -eq 0 ] && [ '${{ steps.quality.outputs.audit_high }}' -eq 0 ]; then
              echo "✅ **Excellent code quality** - No critical issues detected"
            elif [ '${{ steps.quality.outputs.eslint_errors }}' -gt 0 ] || [ '${{ steps.quality.outputs.tests_failed }}' -gt 0 ]; then
              echo "⚠️ **Action required** - Some issues need attention before merge"
            else
              echo "📊 **Generally good** - Minor improvements recommended"
            fi
            
            echo ""
            echo "| Metric | Status | Count |"
            echo "|--------|--------|-------|"
            
            if [ '${{ steps.quality.outputs.eslint_errors }}' -eq 0 ]; then
              echo "| ESLint Errors | ✅ Clean | ${{ steps.quality.outputs.eslint_errors }} |"
            else
              echo "| ESLint Errors | ❌ Issues | ${{ steps.quality.outputs.eslint_errors }} |"
            fi
            
            if [ '${{ steps.quality.outputs.eslint_warnings }}' -eq 0 ]; then
              echo "| ESLint Warnings | ✅ Clean | ${{ steps.quality.outputs.eslint_warnings }} |"
            else
              echo "| ESLint Warnings | ⚠️ Minor | ${{ steps.quality.outputs.eslint_warnings }} |"
            fi
            
            if [ '${{ steps.quality.outputs.tests_failed }}' -eq 0 ]; then
              echo "| Test Results | ✅ Passing | ${{ steps.quality.outputs.tests_passed }} passed |"
            else
              echo "| Test Results | ❌ Failing | ${{ steps.quality.outputs.tests_failed }} failed |"
            fi
            
            if [ '${{ steps.quality.outputs.audit_high }}' -eq 0 ]; then
              echo "| Security | ✅ Secure | No high vulnerabilities |"
            else
              echo "| Security | 🚨 Alert | ${{ steps.quality.outputs.audit_high }} high vulnerabilities |"
            fi
            
            echo ""
            echo "### Recommendations"
            echo ""
            
            # Recomendaciones específicas
            if [ '${{ steps.quality.outputs.eslint_errors }}' -gt 0 ]; then
              echo "🔧 **Fix ESLint errors** - Address the ${{ steps.quality.outputs.eslint_errors }} linting errors to maintain code standards"
            fi
            
            if [ '${{ steps.quality.outputs.tests_failed }}' -gt 0 ]; then
              echo "🧪 **Resolve test failures** - ${{ steps.quality.outputs.tests_failed }} tests are currently failing and need attention"
            fi
            
            if [ '${{ steps.quality.outputs.audit_high }}' -gt 0 ]; then
              echo "🚨 **Address security vulnerabilities** - ${{ steps.quality.outputs.audit_high }} high-severity security issues detected"
            fi
            
            if [ '${{ steps.quality.outputs.formatting_issues }}' -gt 0 ]; then
              echo "💅 **Format code** - Run Prettier to fix ${{ steps.quality.outputs.formatting_issues }} formatting inconsistencies"
            fi
            
            # Recomendaciones positivas
            if [ '${{ steps.quality.outputs.eslint_errors }}' -eq 0 ] && [ '${{ steps.quality.outputs.tests_failed }}' -eq 0 ]; then
              echo "✨ **Well done!** - Code quality metrics look excellent"
              echo "� **Ready for review** - Consider adding more comprehensive tests if applicable"
              echo "📖 **Documentation** - Ensure all new features are properly documented"
            fi
            
            echo ""
            echo "### Files Modified"
            echo ""
            echo "\`\`\`"
            git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | head -15
            echo "\`\`\`"
            
            if [ '$FILES_CHANGED' -gt 15 ]; then
              echo "*... and $(($FILES_CHANGED - 15)) more files*"
            fi
            
            echo ""
            echo "---"
            echo "*Generated by GitHub Copilot-style automated review system*"
            
          } > copilot_comment.txt

          # Convertir a formato para GitHub
          COPILOT_COMMENT=$(cat copilot_comment.txt | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "completions=$COPILOT_COMMENT" >> $GITHUB_OUTPUT

      - name: Generate Workflow Summary
        if: always()
        run: |
          echo "## 🚀 GitHub Copilot-Style AI Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
          
          # ESLint Results
          echo "#### 🔍 ESLint Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Errors: ${{ steps.eslint.outputs.eslint_errors }}" >> $GITHUB_STEP_SUMMARY
          echo "- Warnings: ${{ steps.eslint.outputs.eslint_warnings }}" >> $GITHUB_STEP_SUMMARY
          
          # Test Results
          echo "#### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Tests Passed: ${{ steps.tests.outputs.tests_passed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests Failed: ${{ steps.tests.outputs.tests_failed }}" >> $GITHUB_STEP_SUMMARY
          
          # Security Results
          echo "#### 🔒 Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "- High Severity Issues: ${{ steps.security.outputs.audit_high }}" >> $GITHUB_STEP_SUMMARY
          echo "- Moderate Severity Issues: ${{ steps.security.outputs.audit_moderate }}" >> $GITHUB_STEP_SUMMARY
          
          # Formatting Results
          echo "#### 💅 Code Formatting" >> $GITHUB_STEP_SUMMARY
          echo "- Formatting Issues: ${{ steps.formatting.outputs.formatting_issues }}" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status | Results |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          # ESLint Status
          if [ "${{ steps.quality.outputs.eslint_errors }}" = "0" ]; then
            echo "| ESLint | ✅ Clean | ${{ steps.quality.outputs.eslint_errors }} errors, ${{ steps.quality.outputs.eslint_warnings }} warnings |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ESLint | ❌ Issues | ${{ steps.quality.outputs.eslint_errors }} errors, ${{ steps.quality.outputs.eslint_warnings }} warnings |" >> $GITHUB_STEP_SUMMARY
          fi

          # Tests Status
          if [ "${{ steps.quality.outputs.tests_failed }}" = "0" ]; then
            echo "| Tests | ✅ Passing | ${{ steps.quality.outputs.tests_passed }} passed, ${{ steps.quality.outputs.tests_failed }} failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tests | ❌ Failing | ${{ steps.quality.outputs.tests_passed }} passed, ${{ steps.quality.outputs.tests_failed }} failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Security Status
          if [ "${{ steps.quality.outputs.audit_high }}" = "0" ]; then
            echo "| Security | ✅ Secure | ${{ steps.quality.outputs.audit_high }} high, ${{ steps.quality.outputs.audit_moderate }} moderate vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security | 🚨 Alert | ${{ steps.quality.outputs.audit_high }} high, ${{ steps.quality.outputs.audit_moderate }} moderate vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          fi

          # Formatting Status
          if [ "${{ steps.quality.outputs.formatting_issues }}" = "0" ]; then
            echo "| Formatting | ✅ Clean | ${{ steps.quality.outputs.formatting_issues }} issues |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Formatting | ⚠️ Issues | ${{ steps.quality.outputs.formatting_issues }} issues |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🤖 AI Review System Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.openai.outputs.openai_failed }}" = "true" ]; then
            echo "- ⚠️ **OpenAI API**: Failed (using enhanced fallback)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **GitHub Copilot Style Fallback**: Active and comprehensive" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **OpenAI API**: Success with GitHub Copilot-style prompting" >> $GITHUB_STEP_SUMMARY
            echo "- 🎯 **Review Quality**: Enhanced with comprehensive analysis" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 PR Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 Files changed: ${{ steps.diff.outputs.files_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- ➕ Lines added: ${{ steps.diff.outputs.lines_added }}" >> $GITHUB_STEP_SUMMARY
          echo "- ➖ Lines deleted: ${{ steps.diff.outputs.lines_deleted }}" >> $GITHUB_STEP_SUMMARY
          echo "- 💻 Code files: ${{ steps.diff.outputs.js_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 Documentation: ${{ steps.diff.outputs.md_files }}" >> $GITHUB_STEP_SUMMARY

      - name: Update PR Description with AI Analysis
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Variables de análisis
              const eslintErrors = '${{ steps.quality.outputs.eslint_errors }}';
              const eslintWarnings = '${{ steps.quality.outputs.eslint_warnings }}';
              const testsPassed = '${{ steps.quality.outputs.tests_passed }}';
              const testsFailed = '${{ steps.quality.outputs.tests_failed }}';
              const auditHigh = '${{ steps.quality.outputs.audit_high }}';
              const auditModerate = '${{ steps.quality.outputs.audit_moderate }}';
              const formattingIssues = '${{ steps.quality.outputs.formatting_issues }}';
              
              // Variables de cambios del PR
              const filesChanged = '${{ steps.diff.outputs.files_changed }}';
              const linesAdded = '${{ steps.diff.outputs.lines_added }}';
              const linesDeleted = '${{ steps.diff.outputs.lines_deleted }}';
              const jsFiles = '${{ steps.diff.outputs.js_files }}';
              const cssFiles = '${{ steps.diff.outputs.css_files }}';
              const jsonFiles = '${{ steps.diff.outputs.json_files }}';
              const mdFiles = '${{ steps.diff.outputs.md_files }}';
              const configFiles = '${{ steps.diff.outputs.config_files }}';
              const otherFiles = '${{ steps.diff.outputs.other_files }}';
              
              // Leer el resumen de archivos cambiados y el propósito del PR
              const fs = require('fs');
              let fileChangesSummary = '';
              let purposeSummary = '';
              
              try {
                fileChangesSummary = fs.readFileSync('pr_changes_summary.txt', 'utf8');
              } catch (error) {
                fileChangesSummary = 'Unable to read file changes summary.';
              }
              
              try {
                purposeSummary = fs.readFileSync('pr_purpose_summary.txt', 'utf8');
                if (!purposeSummary || purposeSummary.trim() === '') {
                  throw new Error('Empty purpose summary');
                }
              } catch (error) {
                // Generar un propósito basado en los tipos de archivos modificados
                const purpose = [];
                if (jsFiles > 0) purpose.push('JavaScript/TypeScript changes');
                if (cssFiles > 0) purpose.push('UI/styling updates');
                if (mdFiles > 0) purpose.push('documentation improvements');
                if (configFiles > 0) purpose.push('configuration changes');
                
                purposeSummary = [
                  '## 📝 PR Purpose',
                  '',
                  `**Purpose:** ${purpose.length > 0 ? purpose.join(', ') : 'General updates'}`,
                  '',
                  '**Details:** This PR contains ' + (purpose.length > 0 ? 
                    `changes related to ${purpose.join(' and ')}` : 
                    'updates and improvements to the codebase'),
                  '',
                  '### 🔍 Key Changes',
                  jsFiles > 0 ? '- 💻 Code modifications' : '',
                  cssFiles > 0 ? '- 🎨 Style updates' : '',
                  mdFiles > 0 ? '- 📚 Documentation changes' : '',
                  configFiles > 0 ? '- ⚙️ Configuration updates' : ''
                ].filter(line => line !== '').join('\n');
              }
              
              // Construir tabla de estadísticas de cambios
              const changesTable = [
                '| Metric | Count |',
                '|--------|-------|',
                `| Files Changed | ${filesChanged} |`,
                `| Lines Added | +${linesAdded} |`,
                `| Lines Deleted | -${linesDeleted} |`,
                `| Net Change | ${parseInt(linesAdded) - parseInt(linesDeleted)} |`
              ].join('\n');
              
              // Construir tabla de tipos de archivos
              const fileTypesTable = [
                '| File Type | Count |',
                '|-----------|-------|',
                `| JavaScript/TypeScript | ${jsFiles} |`,
                `| CSS/Styling | ${cssFiles} |`,
                `| JSON | ${jsonFiles} |`,
                `| Markdown | ${mdFiles} |`,
                `| Config Files | ${configFiles} |`,
                `| Other | ${otherFiles} |`
              ].join('\n');
              
              // Construir la tabla de métricas de calidad
              const metricsTable = [
                '| Metric | Result |',
                '|--------|--------|',
                `| ESLint Errors | ${eslintErrors} |`,
                `| ESLint Warnings | ${eslintWarnings} |`,
                `| Tests Passed | ${testsPassed} |`,
                `| Tests Failed | ${testsFailed} |`,
                `| High Security Issues | ${auditHigh} |`,
                `| Moderate Security Issues | ${auditModerate} |`,
                `| Formatting Issues | ${formattingIssues} |`
              ].join('\n');
              
              // Crear sección de estado rápido con formato mejorado
              const quickStatus = [
                '| Status | Check | Result |',
                '|--------|--------|---------|',
                `| ${eslintErrors === '0' ? '✅' : '❌'} | **ESLint** | ${eslintErrors === '0' ? 'No errors' : eslintErrors + ' errors found'} |`,
                `| ${testsFailed === '0' ? '✅' : '❌'} | **Tests** | ${testsFailed === '0' ? 'All passing' : testsFailed + ' tests failing'} |`,
                `| ${auditHigh === '0' ? '✅' : '🚨'} | **Security** | ${auditHigh === '0' ? 'No high vulnerabilities' : auditHigh + ' high vulnerabilities'} |`,
                `| ${formattingIssues === '0' ? '✅' : '💅'} | **Formatting** | ${formattingIssues === '0' ? 'Well formatted' : 'Needs formatting'} |`,
                ''
              ].join('\n');
              
              // Construir la descripción completa del PR (reemplaza todo el contenido)
              const newBody = [
                '### 🎯 Quick Status',
                quickStatus,
                '',
                '## 🚀 PR Changes Summary',
                '',
                purposeSummary,
                '',
                '### 📊 Change Statistics',
                changesTable,
                '',
                '### 📁 File Types Modified',
                fileTypesTable,
                '',
                fileChangesSummary,
                '',
                '---',
                '',
                '## 🤖 AI Analysis Summary',
                '',
                '### 📊 Code Quality Metrics',
                metricsTable,
                '',
                '### 🎯 Quick Status',
                quickStatus,
                '',
                `*Last updated: ${new Date().toISOString()}*`
              ].join('\n');
              
              // Reemplazar completamente la descripción del PR
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: newBody,
              });
              
              console.log('PR description replaced successfully');
            } catch (error) {
              // eslint-disable-next-line no-console
              console.error('Failed to update PR description:', error);
              // No fallar el workflow si esto falla
            }

      - name: Cleanup temporary files
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -f pr_diff.txt eslint-results.json test-results.json audit-results.json
          rm -f prettier-results.txt pr_changes_summary.txt pr_purpose_summary.txt copilot_comment.txt
          echo "Cleanup completed"
