name: AI PR Commenter

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-comment:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necesario para an√°lisis completo

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        id: eslint
        continue-on-error: true
        run: |
          echo "Running ESLint analysis..."
          npx eslint . --format json --output-file eslint-results.json || true
          
          # Contar errores y warnings
          ERRORS=$(jq '[.[].messages[] | select(.severity == 2)] | length' eslint-results.json 2>/dev/null || echo "0")
          WARNINGS=$(jq '[.[].messages[] | select(.severity == 1)] | length' eslint-results.json 2>/dev/null || echo "0")
          
          echo "eslint_errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "eslint_warnings=$WARNINGS" >> $GITHUB_OUTPUT
          
          if [ "$ERRORS" -gt 0 ] || [ "$WARNINGS" -gt 0 ]; then
            echo "ESLint found $ERRORS errors and $WARNINGS warnings"
          else
            echo "ESLint: No issues found"
          fi

      - name: Run Tests
        id: tests
        continue-on-error: true
        run: |
          echo "Running tests..."
          npm test -- --coverage --json --outputFile=test-results.json || true
          
          # Extraer resultados de tests
          if [ -f "test-results.json" ]; then
            PASSED=$(jq '.numPassedTests // 0' test-results.json)
            FAILED=$(jq '.numFailedTests // 0' test-results.json)
            COVERAGE=$(jq '.coverageMap // {} | keys | length' test-results.json)
          else
            PASSED=0
            FAILED=0
            COVERAGE=0
          fi
          
          echo "tests_passed=$PASSED" >> $GITHUB_OUTPUT
          echo "tests_failed=$FAILED" >> $GITHUB_OUTPUT
          echo "coverage_files=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Security Audit
        id: audit
        continue-on-error: true
        run: |
          echo "Running security audit..."
          npm audit --json > audit-results.json || true
          
          # Contar vulnerabilidades por severidad
          HIGH=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "high") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
          MODERATE=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "moderate") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
          
          echo "audit_high=$HIGH" >> $GITHUB_OUTPUT
          echo "audit_moderate=$MODERATE" >> $GITHUB_OUTPUT

      - name: Check Code Formatting
        id: prettier
        continue-on-error: true
        run: |
          echo "Checking code formatting..."
          npx prettier --check . > prettier-results.txt 2>&1 || true
          
          if [ $? -eq 0 ]; then
            echo "formatting_issues=0" >> $GITHUB_OUTPUT
          else
            ISSUES=$(cat prettier-results.txt | grep -c "Code style issues found" || echo "1")
            echo "formatting_issues=$ISSUES" >> $GITHUB_OUTPUT
          fi

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > pr_diff.txt

      - name: Call OpenAI API to generate comment
        id: openai
        env:
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
            # Crear resumen de an√°lisis
            ANALYSIS_SUMMARY="Code Analysis Results:
            - ESLint: ${{ steps.eslint.outputs.eslint_errors }} errors, ${{ steps.eslint.outputs.eslint_warnings }} warnings
            - Tests: ${{ steps.tests.outputs.tests_passed }} passed, ${{ steps.tests.outputs.tests_failed }} failed
            - Security: ${{ steps.audit.outputs.audit_high }} high, ${{ steps.audit.outputs.audit_moderate }} moderate vulnerabilities
            - Formatting: ${{ steps.prettier.outputs.formatting_issues }} formatting issues"

            RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @- <<EOF
            {
            "model": "gpt-3.5-turbo",
            "messages": [
                {
                "role": "system",
                "content": "You are an expert code reviewer. Provide constructive, actionable feedback."
                },
                {
                "role": "user",
                "content": "Please review this PR diff and provide helpful feedback. Include analysis of the automated checks:\n\n$ANALYSIS_SUMMARY\n\nPR Diff:\n$(cat pr_diff.txt)"
                }
            ],
            "max_tokens": 300
            }
            EOF
            )

            # Extraer error si existe
            ERROR=$(echo "$RESPONSE" | jq -r '.error.message // empty')

            if [ -n "$ERROR" ]; then
            echo "OpenAI API error detected: $ERROR" >&2
            echo "openai_failed=true" >> $GITHUB_OUTPUT
            echo "completions=OpenAI API failed: $ERROR" >> $GITHUB_OUTPUT
            else
            COMMENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
            # Por seguridad, si la respuesta est√° vac√≠a
            if [ -z "$COMMENT" ]; then
                COMMENT="No comment generated by AI."
            fi
            echo "openai_failed=false" >> $GITHUB_OUTPUT
            echo "completions=$COMMENT" >> $GITHUB_OUTPUT
            fi

      - name: Fallback to GitHub Copilot
        id: copilot
        if: steps.openai.outputs.openai_failed == 'true'
        run: |
            echo "Trying GitHub Copilot as fallback..."
            
            # Crear comentario de fallback l√≠nea por l√≠nea para evitar problemas de formato
            {
              echo "ü§ñ **AI Code Review (Fallback)**"
              echo ""
              echo "## üìä Automated Analysis Results"
              echo ""
              echo "### üîç ESLint Analysis"
              echo "- ‚ùå Errors: ${{ steps.eslint.outputs.eslint_errors }}"
              echo "- ‚ö†Ô∏è Warnings: ${{ steps.eslint.outputs.eslint_warnings }}"
              echo ""
              echo "### üß™ Test Results"
              echo "- ‚úÖ Passed: ${{ steps.tests.outputs.tests_passed }}"
              echo "- ‚ùå Failed: ${{ steps.tests.outputs.tests_failed }}"
              echo "- üìä Coverage: ${{ steps.tests.outputs.coverage_files }} files"
              echo ""
              echo "### üîí Security Audit"
              echo "- üö® High vulnerabilities: ${{ steps.audit.outputs.audit_high }}"
              echo "- ‚ö†Ô∏è Moderate vulnerabilities: ${{ steps.audit.outputs.audit_moderate }}"
              echo ""
              echo "### üíÖ Code Formatting"
              echo "- üìù Formatting issues: ${{ steps.prettier.outputs.formatting_issues }}"
              echo ""
              echo "## üéØ Recommendations"
              echo ""
              if [ '${{ steps.eslint.outputs.eslint_errors }}' -gt 0 ]; then
                echo "- üîß **Fix ESLint errors** before merging"
              fi
              if [ '${{ steps.tests.outputs.tests_failed }}' -gt 0 ]; then
                echo "- üß™ **Fix failing tests** to ensure code quality"
              fi
              if [ '${{ steps.audit.outputs.audit_high }}' -gt 0 ]; then
                echo "- üö® **Address high security vulnerabilities** immediately"
              fi
              if [ '${{ steps.prettier.outputs.formatting_issues }}' -gt 0 ]; then
                echo "- üíÖ **Run prettier** to fix formatting issues"
              fi
              echo "- ‚úÖ Verify all changes work as expected"
              echo "- üìö Update documentation if needed"
              echo "- üîç Consider adding more tests for new functionality"
              echo ""
              echo "*Generated by fallback system due to OpenAI API limitations.*"
            } > copilot_comment.txt
            
            # Convertir el archivo a una sola l√≠nea con \n literales para GitHub output
            COPILOT_COMMENT=$(cat copilot_comment.txt | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "completions=$COPILOT_COMMENT" >> $GITHUB_OUTPUT

      - name: Generate Workflow Summary
        if: always()
        run: |
          echo "## üöÄ AI PR Review Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status | Results |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ‚úÖ | ${{ steps.eslint.outputs.eslint_errors }} errors, ${{ steps.eslint.outputs.eslint_warnings }} warnings |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ‚úÖ | ${{ steps.tests.outputs.tests_passed }} passed, ${{ steps.tests.outputs.tests_failed }} failed |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ‚úÖ | ${{ steps.audit.outputs.audit_high }} high, ${{ steps.audit.outputs.audit_moderate }} moderate vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          echo "| Formatting | ‚úÖ | ${{ steps.prettier.outputs.formatting_issues }} issues |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ü§ñ AI Review Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.openai.outputs.openai_failed }}" = "true" ]; then
            echo "- ‚ö†Ô∏è OpenAI API: Failed (using fallback)" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Fallback System: Active" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ OpenAI API: Success" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Post comment to PR
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Obtener el comentario de OpenAI o Copilot
              let comment = `${{ steps.openai.outputs.completions }}` || `${{ steps.copilot.outputs.completions }}` || "No AI comment available.";
              
              // Convertir \n literales a saltos de l√≠nea reales
              comment = comment.replace(/\\n/g, '\n');
              
              // Limitar el tama√±o del comentario si es muy largo
              if (comment.length > 65000) {
                comment = comment.substring(0, 65000) + '\n\n*Comment truncated due to length limitations.*';
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: comment,
              });
              
              console.log('Comment posted successfully');
              console.log('Comment length:', comment.length);
            } catch (error) {
              console.error('Failed to post comment:', error);
              
              // Try to post a fallback comment
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: 'ü§ñ AI PR review attempted but encountered an issue. Please review manually.\n\nError: ' + error.message,
                });
              } catch (fallbackError) {
                console.error('Failed to post fallback comment:', fallbackError);
                throw error; // Re-throw original error
              }
            }

